plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'jacoco'
}

android {

    namespace "com.tws.moments"
    
    compileSdkVersion 34

    defaultConfig {
        applicationId "com.tws.moments"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {

        debug {
            enableUnitTestCoverage = true
            testCoverageEnabled = true // Enable coverage for this variant
        }

        release {
            minifyEnabled false
            enableUnitTestCoverage = true
            testCoverageEnabled = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    // work-runtime-ktx 2.1.0 and above now requires Java 8
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        viewBinding true
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    implementation 'com.github.bumptech.glide:glide:4.12.0'

    implementation "androidx.fragment:fragment-ktx:1.8.3"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.8.5"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.5"

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'

    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'androidx.test.ext:junit-ktx:1.2.1'

    implementation "com.google.dagger:hilt-android:2.51.1"
    kapt "com.google.dagger:hilt-compiler:2.51.1"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test:core:1.6.1'
    testImplementation 'org.mockito:mockito-core:4.2.0'
    testImplementation 'io.mockk:mockk:1.12.2'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
}

jacoco {
    toolVersion = "0.8.8"
}

tasks.register('codeCoverage', JacocoReport) {

    // The reports to be generated by this task.
    reports {
        html.required.set(true)
    }

    // Source sets that coverage should be reported for. Please be aware it's
    // adjusted to our project and set classes which best fits to your needs.
    classDirectories.setFrom(
            fileTree(project.buildDir) {
                include("**/tmp/kotlin-classes/debug/**")
                exclude(
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        '**/airbnb/**/*.*',
                        "**/*Screen*",
                        "**/Showkase*",
                        "**/theme/Theme*",
                        "**/theme/Type*",
                )
            }
    )

    // Source sets that coverage should be reported for.
    sourceDirectories.setFrom(
            fileTree(dir: project.projectDir, includes: ["src/main/java/**", "src/main/kotlin/**"])
    )

    // Collection of execution data files to analyze. Please be aware it's adjusted to our project.
    // In the next step I wll show you how to find these files!
    executionData.setFrom(
            fileTree(dir: "${buildDir}/outputs/unit_test_code_coverage", includes: ["**/*.exec", "**/*.ec"])
    )
}